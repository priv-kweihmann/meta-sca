#!/usr/bin/env python3
# SPDX-License-Identifier: BSD-2-Clause
# Copyright (c) 2021, Konrad Weihmann

# a go-recipe generator using https://pkg.go.dev and https://proxy.golang.org info

import argparse
import fnmatch
import glob
import hashlib
import json
import logging
import os
import re
import shutil
import subprocess
import tempfile

import requests
from tqdm import tqdm

log = logging.getLogger(__name__)


class TqdmLoggingHandler(logging.Handler):
    def __init__(self, pbar, level=logging.NOTSET):
        self._pbar = pbar
        super().__init__(level)

    def emit(self, record):
        try:
            self._pbar.write("[{}] {}".format(
                record.levelname, self.format(record)))
            self.flush()
        except (KeyboardInterrupt, SystemExit):
            raise
        except:
            self.handleError(record)


class ExtendAction(argparse.Action):

    def __call__(self, parser, namespace, values, option_string=None):
        items = getattr(namespace, self.dest) or []
        items.extend(values)
        setattr(namespace, self.dest, items)


def create_parser():
    parser = argparse.ArgumentParser(description='go-recipe generator',
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    parser.register('action', 'extend', ExtendAction)

    parser.add_argument("--version", default="",
                        help="explicit version to chose")
    parser.add_argument("--tmpdir", default=tempfile.gettempdir(),
                        help="explicit temporary directory to chose")
    parser.add_argument("--errata", default=os.path.join(os.path.dirname(__file__),
                                                         "go-gen-errata.json"), help="errata file for this tool")
    parser.add_argument("--tmpignore", default=os.path.join(os.path.dirname(__file__),
                                                            "go-gen-ignore.json"), help="List of mods not to update")
    parser.add_argument("--erratadict", help=argparse.SUPPRESS)
    parser.add_argument("--usetests", default=False,
                        action="store_true", help="Use also test files")
    parser.add_argument("--withunused", default=False,
                        action="store_true", help="Add go.mod even they are unused")
    parser.add_argument("--nolicensesfrom", default=["vendor/*", "examples/*", "*/testdata/*", "tutorial/*"],
                        action="extend", nargs="*", help="Ignore licenses from these pattern")
    parser.add_argument("--force", default=False,
                        action="store_true", help="Force creation")
    parser.add_argument("--recursionlevel", type=int,
                        default=99999999999, help="Level of recursion")
    parser.add_argument("--keepdepversion", default=False, action="store_true",
                        help="Do not update any dependencies if any version exists")
    parser.add_argument("path", help="path to store the recipes to")
    parser.add_argument("mod", nargs="+", help="go-mod to create")
    x = parser.parse_args()
    with open(x.errata) as i:
        x.erratadict = json.load(i)

    with open(x.tmpignore) as i:
        x.ignores = json.load(i)
    return x


def __get_latest_version(args, name, version):
    _fixed = version or args.erratadict.get(name, {}).get("version")
    if not _fixed:
        req = requests.get('https://proxy.golang.org/{}/@latest'.format(name))
        if req.status_code == 200:
            _fixed = req.json()["Version"].lstrip("v")
    if not _fixed:
        raise Exception("Can't determine version for {}".format(name))
    return _fixed


def __get_sha256(path):
    hash_sha = hashlib.sha256()
    with open(path, "rb") as f:
        for chunk in iter(lambda: f.read(4096), b""):
            hash_sha.update(chunk)
    return hash_sha.hexdigest()


def __name_clean(name):
    return name.lower().replace("/", "-").replace(".", "-").replace("_", "-").replace("~", "-")


def __get_checkout(args, name, version):
    _path = os.path.join(args.tmpdir, name)
    _version = __get_latest_version(args, name, version)

    _errata_version = args.erratadict.get(name, {}).get("version", "")
    # prefix the v in case it got missing
    if not _version.startswith("v") and _errata_version.startswith("v"):
        _version = "v" + _version

    _url = args.erratadict.get(name, {}).get(
        "url", "https://proxy.golang.org/{}/@v/v{}.zip".format(name, _version))
    _url = _url.replace("%VERSION%", version or _version)
    __temp_file = os.path.join(args.tmpdir, "temp.zip")
    shutil.rmtree(_path, ignore_errors=True)
    os.makedirs(_path, exist_ok=True)

    _extra_recipes_lines = []
    _attional_fetcher_attr = []
    _suffix_out = args.erratadict.get(name, {}).get("buildsuffix", name)
    if _url.startswith("https://"):
        subprocess.check_call(
            "wget --quiet {url} -O {tmpfile}".format(url=_url, tmpfile=__temp_file), shell=True)
        subprocess.check_call("unzip {tmpfile} -d {path} 2>&1 >/dev/null".format(
            path=_path, tmpfile=__temp_file), shell=True)

        _attional_fetcher_attr.append("srcoutput={}".format(_suffix_out))
        _strip_level = args.erratadict.get(name, {}).get(
            "striplevel", len(name.split("/")))
        _strip_path = []
        for i in range(_strip_level):
            _dir = [x for x in os.listdir(os.path.join(
                _path, *_strip_path)) if os.path.isdir(os.path.join(_path, *_strip_path, x))]
            if _dir:
                _strip_path.append(_dir[0])

        _add_strip_path = args.erratadict.get(name, {}).get("addtionalstrip")
        if _add_strip_path:
            _strip_path += [_add_strip_path]
        subprocess.check_call(
            "mv {path}/{sub}/* {path}; rm -rf {path}/{sub}".format(path=_path, sub="/".join(_strip_path)), shell=True)

        _attional_fetcher_attr.append(
            "srcinput={}".format("/".join(_strip_path)))
        _attional_fetcher_attr.append(
            "downloadfilename={cn}-{ver}.zip".format(cn=__name_clean(name), ver=_version))
        _sha = __get_sha256(__temp_file)
        _extra_recipes_lines.append('SRC_URI[{cleanname}.sha256sum] = "{sha256}"'.format(
            cleanname=__name_clean(name), sha256=_sha))
    elif _url.startswith("git://"):
        subprocess.check_call("git clone {url} {path}".format(path=_path, url=_url.replace('git://', 'https://')), shell=True,
                              stderr=subprocess.DEVNULL)
        subprocess.check_call("git checkout {revision}".format(revision=_version), shell=True, cwd=_path,
                              stderr=subprocess.DEVNULL)
        # translate tag to revision
        rev = subprocess.check_output(
            "git rev-list -1 {revision}".format(revision=_version), shell=True, cwd=_path)
        if not isinstance(rev, str):
            rev = rev.decode("utf-8")
        rev = rev.strip("\n")
        _extra_recipes_lines.append('SRCREV_{cn} = "{rev}"'.format(
            cn=__name_clean(name), rev=rev))
        _upstream_branch = args.erratadict.get(name, {}).get("branch", "")
        if _upstream_branch:
            _attional_fetcher_attr.append(
                "branch={branch}".format(branch=_upstream_branch))
        else:
            _attional_fetcher_attr.append("nobranch=1")
        _attional_fetcher_attr.append("protocol=https")
        _attional_fetcher_attr.append("srcinput={}".format(
            args.erratadict.get(name, {}).get("inputname", name)))
        _attional_fetcher_attr.append("srcoutput={}".format(_suffix_out))
        _attional_fetcher_attr.append("destsuffix={}".format(name))
    _attional_fetcher_attr.append("name={cn}".format(cn=__name_clean(name)))
    if _attional_fetcher_attr:
        _url += ";" + ";".join(_attional_fetcher_attr)

    _extra_recipes_lines += args.erratadict.get(name, {}).get("extra", [])

    return _path, _url, _version.lstrip("v"), _extra_recipes_lines


def __prettify(value):
    if isinstance(value, str):
        return value
    if isinstance(value, (list, set)):
        if value:
            return "\\\n    " + " \\\n    ".join(sorted(value)) + " \\\n"
    return ""


def __get_md5sum(path):
    hash_md5 = hashlib.md5()
    with open(path, "rb") as f:
        for chunk in iter(lambda: f.read(4096), b""):
            hash_md5.update(chunk)
    return hash_md5.hexdigest()


def __get_license(args, path, default=["UNKNOWN"]):
    res = set()
    _tmp_store = os.path.join(args.tmpdir, "scancode.json")
    subprocess.check_call(["scancode", "-l", "--quiet", "--json",
                           _tmp_store, path], stderr=subprocess.DEVNULL)
    with open(_tmp_store) as i:
        j = json.load(i)
        for f in j["files"]:
            if f["path"].endswith("_test.go"):
                continue
            for l in f["licenses"]:
                if l["spdx_license_key"].startswith("LicenseRef-scancode"):
                    continue
                res.add(l["spdx_license_key"])
                log.info("{} identified as {}".format(
                    f["path"], l["spdx_license_key"]))
    if not res:
        log.warning("{} has no identifiable license".format(
            os.path.basename(path)))
        return set(default)
    return res


def __get_license_from_root(args, name, path):
    _files = []
    for x in glob.glob(os.path.join(path, "*"), recursive=False):
        if not os.path.isfile(x):
            continue
        if any(fnmatch.fnmatch(x, y) for y in args.nolicensesfrom):
            continue
        _files.append(x)
    _suffix_out = args.erratadict.get(name, {}).get("buildsuffix", name)
    res = []
    for f in _files:
        _relpath = f.replace(path, "", 1).lstrip("/")
        _lic = __get_license(args, f, default=[])
        if _lic:
            res.append(
                (_lic, "file://{}/{};md5={}".format(_suffix_out, _relpath, __get_md5sum(f))))
    return res


def __get_license_file(args, name, path):
    res = []
    _suffix_out = args.erratadict.get(name, {}).get("buildsuffix", name)
    _ignores = args.nolicensesfrom + \
        args.erratadict.get(name, {}).get("licenseignore", [])
    _fixedlicense = args.erratadict.get(name, {}).get("licenses", [])
    if _fixedlicense:
        for lic in _fixedlicense:
            _relpath = lic["file"]
            _fullpath = os.path.join(path, _relpath)
            res.append(([lic["spdx"]],
                        "file://{}/{};md5={}".format(_suffix_out, _relpath, __get_md5sum(_fullpath))))
    else:
        for root, dirs, files in os.walk(path, topdown=True):
            for f in files:
                _filename = os.path.basename(f)
                _fullpath = os.path.join(root, f)
                _relpath = _fullpath.replace(path, "", 1).lstrip("/")
                if any(fnmatch.fnmatch(_relpath, x) for x in _ignores):
                    continue
                if re.match(r"(license.*|copying.*|licence.*|.*-license)", _filename, re.IGNORECASE):
                    res.append((__get_license(args, _fullpath),
                                "file://{}/{};md5={}".format(_suffix_out, _relpath, __get_md5sum(_fullpath))))
        if not res:
            res = __get_license_from_root(args, name, path)
        if not res:
            return [(["UNKNOWN"], "file://does/not/exist;md5=1234")]
    return res


def __double_check_mods(args, name, path, mods):
    res = set()
    for m in mods:
        _excl = "--exclude='*_test.go'" if not args.usetests else ""
        _pattern = [
            "-e ' \"{}'".format(m),
            "-e '\t\"{}'".format(m)
        ]
        if name.startswith("golang.org/x"):
            _pattern += [
                "-e ' \"{}'".format(m.replace("golang.org/x", "", 1)),
                "-e '\t\"{}'".format(m.replace("golang.org/x", "", 1))
            ]
        _cmdstring = "grep -h -R {exl} {pattern} -c {path} ".format(exl=_excl, pattern=" ".join(_pattern), path=path) + \
            "| paste -sd+ | bc"
        try:
            out = subprocess.check_output(_cmdstring, shell=True)
            if int(out) < 1 and not args.withunused and out.strip() != name:
                log.info("{name} doesn't seem to be actively using {mod}, ignoring it".format(
                    name=name, mod=m))
            else:
                res.add(m)
        except subprocess.SubprocessError as e:
            pass
    # check for unlisted mods
    if not os.path.exists(os.path.join(path, "go.mod")):
        with open(os.path.join(path, "go.mod"), "w") as o:
            o.write('module "{}"\n'.format(name))
    try:
        _modscan_path = os.path.join(
            path, args.erratadict.get(name, {}).get("modscan", ""))
        out = subprocess.check_output("go list -f '{{ join .Imports \" \" }}' ./...",
                                      shell=True, universal_newlines=True, cwd=_modscan_path, stderr=subprocess.DEVNULL)
        seen = set()
        for x in out.replace("\n", " ").split(" "):
            y = x
            x = x.strip()
            if "/" not in x:
                continue
            if "." not in x.split("/")[0]:
                continue
            if any(x.startswith(z) for z in res):
                continue
            if x.startswith(name):
                continue
            okay = False
            while not okay:
                log.debug("peep {}".format(x))
                try:
                    __get_latest_version(args, x, "")
                    okay = True
                except:
                    z = x
                    x = "/".join(x.split("/")[:-1])
                    if z == x:
                        x = ""
                        log.error(
                            "{}: Cannot determine namespace of the following {} - ignoring it".format(name, y))
                        break
            if x == name:
                continue
            if x in res:
                continue
            if x:
                res.add(x)
                log.warning(
                    "{} uses unlisted module {} - adding that".format(name, x))
    except subprocess.SubprocessError as e:
        pass
    res.update(args.erratadict.get(name, {}).get("extramods", []))
    res -= set(args.erratadict.get(name, {}).get("modignore", []))
    if res:
        log.info("{} depends on {}".format(name, ",".join(sorted(res))))
    return res


def __name_to_recipe_native(name):
    return "{}-native".format(name.lower().replace("/", "-").replace("_", "-").replace("~", "-"))


def __name_to_recipe_native_fn(name, version):
    return "{}_{}.bb".format(__name_to_recipe_native(name), version)


def __name_to_inc_native(name):
    return "{}-sources".format(name.lower().replace("/", "-").replace("_", "-").replace("~", "-"))


def __name_to_inc_native_fn(name):
    return "{}.inc".format(__name_to_inc_native(name))


def __get_mods(path, name):
    res = set()
    if os.path.exists(os.path.join(path, "go.mod")):
        with open(os.path.join(path, "go.mod")) as i:
            _lines = i.readlines()

            # prepare lines
            line_prefix = ""
            for index, value in enumerate(_lines):
                _lines[index] = line_prefix + value
                if value.startswith("require ("):
                    line_prefix = "require "
                elif value.startswith("replace ("):
                    line_prefix = "replace "
                elif value.startswith("exclude ("):
                    line_prefix = "exclude "
                elif value.startswith(")"):
                    line_prefix = ""

            _cnt = "".join(_lines)

            for m in re.finditer(r"^require\s+(?P<mod>.*)\s+v\d+\..*", _cnt, re.MULTILINE):
                _raw = m.group("mod").strip('"')
                if "// indirect" in m.group(0):
                    continue
                if not any(_raw.startswith(x) for x in ["./", ".."]):
                    res.add(_raw)
            for m in re.finditer(r"^exclude\s+(?P<mod>.*)\s+v\d+\.", _cnt, re.MULTILINE):
                try:
                    res.remove(m.group("mod").strip('"'))
                except KeyError:
                    pass
            for m in re.finditer(r"^replace\s+(?P<what>.*) => (?P<mod>.*)", _cnt, re.MULTILINE):
                try:
                    _raw = m.group("mod").strip('"')
                    _rawwhat = m.group("mod").strip('"')
                    if not any(_raw.startswith(x) for x in ["./", ".."]):
                        res.remove(_rawwhat)
                        # strip off potential version info
                        res.add(_raw)
                except KeyError:
                    pass
    return res


def __create_recipe_native(args, desc):
    _tpl = """
SUMMARY = "go.mod: %name%"
HOMEPAGE = "https://pkg.go.dev/%name%"
DEFAULT_PREFERENCE = "${SCA_DEFAULT_PREFERENCE}"
# License is determined by the modules included and will be therefore computed
LICENSE = "${@' & '.join(sorted(set(x for x in (d.getVar('GOSRC_LICENSE') or '').split(' ') if x)))}"

# inject the needed sources
%includesstr%

EXTRA_DEPENDS += "%rdepends%"

GO_IMPORT = "%name%"

%recipeextra%

inherit gosrc
inherit_defer native
"""
    _tpl = _tpl.strip() + "\n"
    _recipe_fn = __name_to_recipe_native_fn(desc["name"], desc["version"])
    for k, v in desc.items():
        _tpl = _tpl.replace("%" + k + "%", __prettify(v))

    # prettify
    _tpl = _tpl.replace('EXTRA_DEPENDS += ""', "")
    _tpl = re.sub(r"\n{3,}", "\n\n", _tpl)

    with open(os.path.join(args.path, _recipe_fn), "w") as o:
        o.write(_tpl)
    log.info("Created {}".format(_recipe_fn))


def __create_include_file(args, desc):
    _tpl = """
SRC_URI += "%srcuri%"
%extrastr%

GOSRC_LICENSE += "%_collected_licenses%"
LIC_FILES_CHKSUM += "%licensefiles%"

GOSRC_INCLUDEGUARD += "%selfname%"

%childincludestr%
"""
    _tpl = _tpl.strip() + "\n"
    _recipe_fn = __name_to_inc_native_fn(desc["name"])
    for k, v in desc.items():
        _tpl = _tpl.replace("%" + k + "%", __prettify(v))

    _tpl = _tpl.replace("%selfname%", _recipe_fn)

    # prettify
    _tpl = _tpl.replace('GOSRC_INCLUDEGUARD += ""', "")
    _tpl = re.sub(r"\n{3,}", "\n\n", _tpl)

    with open(os.path.join(args.path, _recipe_fn), "w") as o:
        o.write(_tpl)
    log.info("Created {}".format(_recipe_fn))
    return ["require {}".format(_recipe_fn)]


def cleanup_recipes(args, name, version):
    _path = os.path.join(args.path, __name_to_recipe_native_fn(name, version))
    for file in glob.glob(os.path.join(args.path, __name_to_recipe_native_fn(name, "*"))):
        if file != _path:
            os.remove(file)


def __get_conditional_require_string(incname):
    return "require ${@bb.utils.contains('GOSRC_INCLUDEGUARD', '%s', '', '%s', d)}" % (incname, incname)


def __does_version_exist(args, name, version):
    return os.path.exists(os.path.join(args.path, __name_to_recipe_native_fn(name, version)))


def __does_any_version_exist(args, name):
    return any(glob.glob(os.path.join(args.path, __name_to_recipe_native_fn(name, '*'))))


def create_module(args, pbar, name, version, level, force, breadcrumb=[]):
    if name in args.ignores:
        return [{"name": name}]
    _desc = {
        "cleanname": __name_clean(name),
        "license": "UNKNOWN",
        "licensefiles": set(),
        "mods": set(),
        "modsrecipes": set(),
        "modsrecipesnat": set(),
        "name": name,
        "extra": [],
        "extrastr": "",
        "srcuri": "",
        "version": "",
        "_collected_licenses": set(),
        "includes": set(),
        "includesstr": "",
        "childreninc": set(),
        "childincludestr": "",
        "rdepends": set(),
        "recipeextra": ""
    }
    if not force and args.keepdepversion and __does_any_version_exist(args, name) and any(breadcrumb):
        return [{"name": name}]
    if not force and (level < 1 or __does_version_exist(args, name, __get_latest_version(args, name, version)) or name in breadcrumb):
        return [{"name": name}]
    try:
        log.debug("#" + ">".join(breadcrumb + [name]))
        pbar.reset()
        pbar.update(min(25, len(breadcrumb) + 1))
        pbar.set_description("Processing {0: >40}".format(name))
        _path, _desc["srcuri"], _desc["version"], _desc["extra"] = __get_checkout(
            args, name, version)
        _desc["extrastr"] = "\n".join(_desc["extra"])
        _desc["mods"] = __double_check_mods(
            args, name, _path, __get_mods(_path, name))
        _raw_lic = __get_license_file(args, name, _path)

        _desc["licensefiles"] = set(x[1] for x in _raw_lic)
        for x in _raw_lic:
            _desc["_collected_licenses"].update(x[0])

        _children = []
        for m in _desc["mods"]:
            _children += create_module(args, pbar, m, "", level - 1, False,
                                       breadcrumb=breadcrumb + [name])

        for c in _children:
            _desc["childreninc"].add(__name_to_inc_native_fn(c["name"]))
            _desc["rdepends"].add(__name_to_recipe_native(c["name"]))

        _desc["childincludestr"] = "\n".join(
            __get_conditional_require_string(x) for x in sorted(_desc["childreninc"])
        )

        _desc["license"] = " & ".join(sorted(_desc["_collected_licenses"]))
        _desc["includesstr"] = "\n".join(__create_include_file(args, _desc))
        _desc["recipeextra"] = "\n".join(
            args.erratadict.get(name, {}).get("recipeextra", []))

        __create_recipe_native(args, _desc)

        cleanup_recipes(args, name, _desc["version"])

        return [_desc]

    except Exception as e:
        log.exception(e)
        pbar.write(
            "Can't generate recipe for {} - please do manually add to {}".format(name, args.errata))
    return []


def main():
    args = create_parser()
    pbar = tqdm(
        total=25, bar_format="{desc} depth: {bar}{n_fmt}/{total_fmt}")
    log.setLevel(logging.INFO)
    log.addHandler(TqdmLoggingHandler(pbar))
    for mod in args.mod:
        create_module(args, pbar, mod, args.version,
                      args.recursionlevel, args.force)
    # clean up tmpdir
    shutil.rmtree(args.tmpdir, ignore_errors=True)


if __name__ == '__main__':
    main()
